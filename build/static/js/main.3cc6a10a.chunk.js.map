{"version":3,"sources":["components/CreateJoinTeam.js","components/NavBar.js","components/SideNav.js","components/Teams.js","components/Home.js","components/Timeline.js","App.js","serviceWorker.js","index.js"],"names":["CreateJoinTeam","componentDidMount","M","AutoInit","setupButtonListener","getEmail","setEmailCallback","chrome","runtime","sendMessage","for","message","response","email","setHeaderEmail","document","querySelector","textContent","substr","indexOf","addEventListener","onCreateTeam","onJoinTeam","teamName","value","msg","that","console","log","storage","local","set","prevTeam","props","history","push","toast","html","displayLength","teamCode","toUpperCase","length","test","className","href","id","type","maxlength","Component","withRouter","NavBar","SideNav","to","Teams","getTeams","setState","teams","onClickTeam","team","state","this","map","onClick","bind","data-position","data-tooltip","Home","a","task","Promise","resolve","reject","get","data","teamMembers","Object","keys","members","teamMember","Timeline","timeline","createLeftCard","innerHTML","time","newElement","style","color","leftRightBranch","createRightCard","flip","tab","url","Date","toLocaleTimeString","black_listed","animals","urls","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3cc6a10a.chunk.js","sourcesContent":["/*global chrome*/\r\nimport React, { Component } from \"react\";\r\nimport M from \"materialize-css\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport \"./materialize.min.css\";\r\nimport \"./CreateJoinTeam.css\";\r\n\r\nclass CreateJoinTeam extends Component {\r\n  /**\r\n   * Setup materialize ui and button listener\r\n   * @author Karl Wang\r\n   */\r\n  componentDidMount = () => {\r\n    M.AutoInit();\r\n    this.setupButtonListener();\r\n  };\r\n  /**\r\n   * Get the email from background page and update the html\r\n   * @author : Karl Wang\r\n   * @param {function} setEmailCallback Send the email to the html\r\n   */\r\n  getEmail = (setEmailCallback) => {\r\n    // the message to be sent\r\n    let msg = { for: \"background\", message: \"get email\" };\r\n    chrome.runtime.sendMessage(msg, function (response) {\r\n      // set the email on html\r\n      setEmailCallback(response.email);\r\n    });\r\n  };\r\n  /**\r\n   * Get the prefix of the email and show it on html\r\n   * @author : Karl Wang\r\n   * @param {string} email The email to be shown on html\r\n   */\r\n  setHeaderEmail = (email) => {\r\n    let insertEmail = document.querySelector(\"#insertEmail\");\r\n    insertEmail.textContent = email.substr(0, email.indexOf(\"@\"));\r\n  };\r\n\r\n  /**\r\n   * Setup the listener for create team and join team button\r\n   * @author : Karl Wang\r\n   */\r\n  setupButtonListener = () => {\r\n    let createButton = document.querySelector(\"#createButton\");\r\n    createButton.addEventListener(\"click\", this.onCreateTeam);\r\n    let joinButton = document.querySelector(\"#joinButton\");\r\n    joinButton.addEventListener(\"click\", this.onJoinTeam);\r\n  };\r\n\r\n  /**\r\n   * Send the team name to background, which handles create team on database\r\n   * Do preliminary checking if the team name is legit\r\n   * @author : Karl Wang\r\n   */\r\n  onCreateTeam = () => {\r\n    let teamName = document.querySelector(\"#teamName\").value;\r\n    //   team name is empty\r\n    if (teamName === \"\") {\r\n      M.toast({ html: \"Team name cannot be empty!\", displayLength: 2000 });\r\n      return;\r\n    }\r\n    let msg = {\r\n      for: \"background\",\r\n      message: \"create team\",\r\n      teamName: teamName,\r\n    };\r\n    let that = this;\r\n    //   send to background page\r\n    chrome.runtime.sendMessage(msg, (response) => {\r\n      console.log(response);\r\n      chrome.storage.local.set({ prevTeam: response });\r\n      that.props.history.push(\"/\");\r\n    });\r\n  };\r\n  /**\r\n   * Send the request along with the team code to background page\r\n   * Do preliminary checking to see if the team code is valid\r\n   * @author : Karl Wang\r\n   */\r\n  onJoinTeam = () => {\r\n    let teamCode = document.querySelector(\"#teamCode\").value;\r\n    teamCode = teamCode.toUpperCase();\r\n    if (teamCode.length != 5) {\r\n      M.toast({\r\n        html: \"Team code should be 5 characters!\",\r\n        displayLength: 2000,\r\n      });\r\n      return;\r\n    }\r\n    //   check if it only contains alphabets and numbers\r\n    const regex = /^[A-Z0-9]+$/i;\r\n    if (!regex.test(teamCode)) {\r\n      M.toast({\r\n        html: \"Team code should only contains alphabets and numbers\",\r\n        displayLength: 2000,\r\n      });\r\n      return;\r\n    }\r\n\r\n    let msg = {\r\n      for: \"background\",\r\n      message: \"join team\",\r\n      teamCode: teamCode,\r\n    };\r\n    chrome.runtime.sendMessage(msg, (response) => {\r\n      if (response === \"team code not found\") {\r\n        M.toast({\r\n          html: \"Team code does not exist!\",\r\n          displayLength: 2000,\r\n        });\r\n        return;\r\n      } else if (response === \"success\") {\r\n        chrome.storage.local.set(\r\n          {\r\n            prevTeam: teamCode,\r\n          },\r\n          () => {\r\n            // if succeed go to home page.\r\n            this.props.history.push(\"/\");\r\n          }\r\n        );\r\n        return;\r\n      } else if (response === \"already joined the group\") {\r\n        M.toast({\r\n          html: \"You have already joined this group\",\r\n          displayLength: 2000,\r\n        });\r\n        return;\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"col s12\">\r\n            <ul className=\"tabs\">\r\n              <li className=\"tab col s6\">\r\n                {/* <!-- First Tab --> */}\r\n                <a className=\"active\" href=\"#createTeam\">\r\n                  Create Team\r\n                </a>\r\n              </li>\r\n              <li className=\"tab col s6\">\r\n                {/* <!-- Second Tab --> */}\r\n                <a className=\"active\" href=\"#joinTeam\">\r\n                  Join Team\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div id=\"createTeam\" className=\"col s12\">\r\n            {/* <!-- Target of first tab -->\r\n        <!-- Row for Team Name --> */}\r\n            <div className=\"row\">\r\n              <div className=\"input-field col s12\">\r\n                <input id=\"teamName\" type=\"text\" className=\"validate\" />\r\n                <label for=\"teamName\">Team Name</label>\r\n              </div>\r\n            </div>\r\n            {/* <!-- Row for CREATE --> */}\r\n            <div className=\"row center-align\">\r\n              <div className=\"col s12\">\r\n                <button\r\n                  id=\"createButton\"\r\n                  className=\"waves-effect waves-light btn-large red accent-1\"\r\n                >\r\n                  Create\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* <!-- Target for the second tab --> */}\r\n          <div id=\"joinTeam\" className=\"col s12\">\r\n            {/* <!-- second tab input team code --> */}\r\n            <div className=\"row\">\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  maxlength=\"5\"\r\n                  id=\"teamCode\"\r\n                  type=\"text\"\r\n                  className=\"validate\"\r\n                />\r\n                <label for=\"teamCode\">Team Code</label>\r\n              </div>\r\n            </div>\r\n\r\n            {/* <!-- Row for JOIN --> */}\r\n            <div className=\"row center-align\">\r\n              <div className=\"col s12\">\r\n                <button\r\n                  id=\"joinButton\"\r\n                  className=\"waves-effect waves-light btn-large red accent-1\"\r\n                >\r\n                  Join\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(CreateJoinTeam);\r\n","import React, { Component } from \"react\";\r\nimport M from \"materialize-css\";\r\nimport \"./materialize.min.css\";\r\nimport \"./NavBar.css\";\r\n\r\n\r\nexport default class NavBar extends Component {\r\n  componentDidMount() {\r\n    M.AutoInit();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* <!-- Navbar goes here --> */}\r\n        <nav>\r\n          <div className=\"nav-wrapper\">\r\n            <a href=\"#\" className=\"brand-logo\">\r\n              Logo\r\n            </a>\r\n            <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n              <li>\r\n                <a href=\"sass.html\">Sass</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"badges.html\">Components</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"collapsible.html\">JavaScript</a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./SideNav.css\";\r\n\r\nexport default class SideNav extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Link\r\n          className=\"grey darken-3 waves-effect waves-light card-panel center-align\"\r\n          to=\"/\"\r\n        >\r\n          <span>Home</span>\r\n        </Link>\r\n        <Link\r\n          className=\"grey darken-3 waves-effect waves-light card-panel center-align\"\r\n          to=\"/teams\"\r\n        >\r\n          <span>Teams</span>\r\n        </Link>\r\n        <Link\r\n          className=\"grey darken-3 waves-effect waves-light card-panel center-align\"\r\n          to=\"/timeline\"\r\n        >\r\n          <span>Timeline</span>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/* global chrome */\r\nimport React, { Component } from \"react\";\r\nimport \"./Teams.css\";\r\nimport M from \"materialize-css\";\r\nimport CreateJoinTeam from \"./CreateJoinTeam\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass Teams extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      teams: [],\r\n    };\r\n  }\r\n  componentDidMount = () => {\r\n    M.AutoInit();\r\n    this.getTeams();\r\n  };\r\n  /**\r\n   * getTeams asks the background js for all the teams of the current user\r\n   * @author Karl Wang\r\n   */\r\n  getTeams = () => {\r\n    let msg = { for: \"background\", message: \"get teams\" };\r\n    chrome.runtime.sendMessage(msg, (response) => {\r\n      this.setState({\r\n        teams: response,\r\n      });\r\n    });\r\n  };\r\n  /**\r\n   * This will redirect the page to home team with the clicked team information.\r\n   * @author Karl Wang\r\n   * @param {Object} team the team that was clicked\r\n   */\r\n  onClickTeam = (team) => {\r\n    chrome.storage.local.set({ prevTeam: team.teamCode });\r\n    this.props.history.push(\"/\" + team.teamCode);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        {this.state.teams.map((team) => {\r\n          return (\r\n            <div className=\"col s3\">\r\n              {/* This is the button of each team */}\r\n              <a\r\n                onClick={this.onClickTeam.bind(this, team)}\r\n                teamCode={team.teamCode}\r\n                className=\"rounded-btn waves-effect waves-light btn\"\r\n              >\r\n                <div className=\"inside-btn\">\r\n                  <text className=\"flexbox-centering\">{team.teamName}</text>\r\n                </div>\r\n              </a>\r\n            </div>\r\n          );\r\n        })}\r\n        <div className=\"col s3\">\r\n          {/* This is the button for adding new team */}\r\n          <a\r\n            href=\"#modal-createjoin\"\r\n            className=\"rounded-btn waves-effect waves-light btn tooltipped modal-trigger\"\r\n            data-position=\"bottom\"\r\n            data-tooltip=\"Create or join a new team\"\r\n          >\r\n            <div className=\"inside-btn\">\r\n              <text className=\"flexbox-centering\">\r\n                {/* using icon add */}\r\n                <i className=\"material-icons\">add</i>\r\n              </text>\r\n            </div>\r\n          </a>\r\n          <div id=\"modal-createjoin\" className=\"modal\">\r\n            <div className=\"modal-content\">\r\n              {/* render modal when clicked on add Button */}\r\n              <CreateJoinTeam></CreateJoinTeam>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n              <a\r\n                href=\"#!\"\r\n                className=\"modal-close waves-effect waves-green btn-flat\"\r\n              >\r\n                Close\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Teams);\r\n","/*global chrome*/\r\nimport React, { Component } from \"react\";\r\n\r\nexport default class Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      teamCode: \"\",\r\n      teamName: \"\",\r\n      teamMembers: [],\r\n    };\r\n  }\r\n  /**\r\n   * Get the information of the current selected team\r\n   * @author Karl Wang\r\n   * \r\n   */\r\n  componentDidMount = async () => {\r\n    // ask chrome storage for the current team\r\n    // The api is async\r\n    let task = new Promise((resolve, reject) => {\r\n      chrome.storage.local.get(\"prevTeam\", function (data) {\r\n        resolve(data);\r\n      });\r\n    });\r\n    let data = await task;\r\n    // First time logging in\r\n    if (!(\"prevTeam\" in data)) {\r\n      return;\r\n    }\r\n    let msg = {\r\n      for: \"background\",\r\n      message: \"get team info\",\r\n      teamCode: data.prevTeam,\r\n    };\r\n    // ask the background for team information\r\n    chrome.runtime.sendMessage(msg, (response) => {\r\n      this.setState({\r\n        teamCode: data.prevTeam,\r\n        teamName: response.teamName,\r\n        teamMembers: Object.keys(response.members),\r\n      });\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"divider\"></div>\r\n        <div className=\"section\">\r\n          <h5>{this.state.teamName}</h5>\r\n          <p>Team Code: {this.state.teamCode}</p>\r\n        </div>\r\n        <div className=\"divider\"></div>\r\n        <div className=\"section\">\r\n          <h5>Team Members</h5>\r\n          {/* {this.state.teamMembers} */}\r\n          {this.state.teamMembers.map((teamMember) => {\r\n            return <p>{teamMember}</p>;\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/*global chrome*/\r\nimport React, { Component } from \"react\";\r\nimport \"./Timeline.css\";\r\n\r\nexport default class Timeline extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      black_listed: [\r\n        \"www.youtube.com\",\r\n        \"www.facebook.com\",\r\n        \"twitter.com\",\r\n        \"myspace.com\",\r\n      ],\r\n      animals: [\r\n        \"alligator\",\r\n        \"anteater\",\r\n        \"armadillo\",\r\n        \"aurochs\",\r\n        \"axolotl\",\r\n        \"badger\",\r\n        \"bat\",\r\n        \"beaver\",\r\n        \"buffalo\",\r\n        \"camel\",\r\n        \"capybara\",\r\n      ],\r\n      leftRightBranch: [],\r\n      urls: [],\r\n    };\r\n  }\r\n  componentDidMount = () => {\r\n    this.timeline();\r\n  };\r\n\r\n  createLeftCard = (innerHTML, time) => {\r\n    let newElement = (\r\n      <div className=\"row\">\r\n        <div className=\"col s6\">\r\n          <div className=\"card blue-grey lighten-5\">\r\n            <div className=\"card-content white-text\">\r\n              <span style={{ color: \"black\" }} className=\"card-title\">\r\n                {innerHTML}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col s6\">\r\n          <div>\r\n            <h4 style={{ color: \"#6886c5\" }}>{time}</h4>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    this.state.leftRightBranch.push(newElement);\r\n    this.setState({\r\n      leftRightBranch: this.state.leftRightBranch,\r\n    });\r\n  };\r\n\r\n  createRightCard = (innerHTML, time) => {\r\n    // date.\r\n    let newElement = (\r\n      <div className=\"row\">\r\n        <div className=\"col s6 \">\r\n          <h4 style={{ color: \"#fa9191\" }}>{time}</h4>\r\n        </div>\r\n        <div className=\"col s6\">\r\n          <div className=\"card blue-grey lighten-5\">\r\n            <div className=\"card-content white-text\">\r\n              <span style={{ color: \"black\" }} className=\"card-title\">\r\n                {innerHTML}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    this.state.leftRightBranch.push(newElement);\r\n    this.setState({\r\n      leftRightBranch: this.state.leftRightBranch,\r\n    });\r\n  };\r\n\r\n  timeline = async () => {\r\n    //   team name is empty\r\n\r\n    let msg = {\r\n      for: \"background\",\r\n      message: \"get timeline\",\r\n    };\r\n\r\n    let task = new Promise((resolve, reject) => {\r\n      chrome.runtime.sendMessage(msg, function (response) {\r\n        // let data = response.data;\r\n        resolve(response);\r\n      });\r\n    });\r\n    let data = await task;\r\n    let flip = false;\r\n    data.map((tab) => {\r\n      let url = tab.url;\r\n      let time = new Date(tab.time).toLocaleTimeString();\r\n      flip ? this.createLeftCard(url, time) : this.createRightCard(url, time);\r\n      flip = !flip;\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return <div id=\"timeline\">{this.state.leftRightBranch}</div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\r\nimport CreateJoinTeam from \"./components/CreateJoinTeam\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport \"./components/materialize.min.css\";\r\nimport SideNav from \"./components/SideNav\";\r\nimport \"./App.css\";\r\nimport Teams from \"./components/Teams\";\r\nimport Home from \"./components/Home\";\r\nimport Timeline from \"./components/Timeline\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Router>\r\n          {/* NavBar should always be shown for all pages */}\r\n          <NavBar></NavBar>\r\n          <div className=\"row\">\r\n            {/* save spaces for the side navbar */}\r\n            <div className=\"col s2\" id=\"side\">\r\n              <SideNav></SideNav>\r\n            </div>\r\n            {/* This is where the real component is at */}\r\n            <div className=\"col s10\" id=\"component\">\r\n              <Switch>\r\n                {/* follow the following examples for adding new component */}\r\n                <Route\r\n                  exact\r\n                  path=\"/createjoin\"\r\n                  component={CreateJoinTeam}\r\n                ></Route>\r\n                <Route exact path=\"/teams\" component={Teams}></Route>\r\n                <Route exact path=\"/timeline\" component={Timeline}></Route>\r\n                <Route path=\"/\" component={Home}></Route>\r\n              </Switch>\r\n            </div>\r\n          </div>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}